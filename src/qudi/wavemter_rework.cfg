#  Qudi configuration file for the new core.
#
global:
    # list of modules to load when starting
    startup: []

    remote_modules_server:
        address: '134.60.83.135'
        port: 12345

    namespace_server_port: 18861

    default_data_dir: 'C:\\Data'

    force_remote_calls_by_value: True

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

gui:
    time_series_gui:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        options:
            use_antialias: True  # optional, set to False if you encounter performance issues
        connect:
            _time_series_logic_con: time_series_reader_logic

    wavemeter_scanning_gui:
        module.Class: 'wavemeter.wavemeter_scanning_gui.WavemeterHistogramGui'
        connect:
            _wavemeter_histogram_logic_con: wavemeter_scanning_logic

logic:
    time_series_reader_logic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        options:
            max_frame_rate: 20  # optional (10Hz by default)
            channel_buffer_size: 1048576  # optional (default: 1MSample)
            calc_digital_freq: True  # optional (True by default)
        connect:
            streamer: instream_dummy #wave_instreamer #instream_dummy #ni_instreamer

    wavemeter_scanning_logic:
        module.Class: 'wavemeter_scanning_logic.WavemeterLogic'
        connect:
            streamer: instream_dummy_wavemeter # instream_dummy_wavemeter #wave_instreamer
            counterlogic: time_series_reader_logic

hardware:
    instream_dummy:
        module.Class: 'dummy.data_instream_dummy.InStreamDummy'
        options:
            channel_names:
                - 'digital 1'
                #- 'analog 1'
                #- 'digital 2'
            channel_units:
                - 'Hz'
                #- 'V'
                #- 'Hz'
            channel_signals:  # Can be 'counts' or 'sine'
                - 'counts'
                #- 'sine'
                #- 'counts'
            data_type: 'float64'
            sample_timing: 'TIMESTAMP'  # Can be 'CONSTANT', 'TIMESTAMP' or 'RANDOM'

    instream_dummy_wavemeter:
        module.Class: 'dummy.data_instream_dummy_wavemeter.InStreamDummy'
        options:
            channel_names:
                - 'wavelength'
            channel_units:
                - 'm'
            channel_signals:  # Can be 'counts' or 'sine'
                - 'counts'
            data_type: 'float64'
            sample_timing: 'TIMESTAMP'  # Can be 'CONSTANT', 'TIMESTAMP' or 'RANDOM'

    microwave_dummy:
        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'

    finite_sampling_input_dummy:
        module.Class: 'dummy.finite_sampling_input_dummy.FiniteSamplingInputDummy'
        options:
            simulation_mode: 'ODMR'
            sample_rate_limits: [1, 1e6]
            frame_size_limits: [1, 1e9]
            channel_units:
                'APD counts': 'c/s'
                'Photodiode': 'V'

    wave_instreamer:
        module.Class: 'wavemeter.high_finesse_wavemeter.HighFinesseWavemeter'
        connect:
            proxy: wavemeter_proxy
        options:
            channels:
                dye_laser:
                    switch_ch: 1    # channel on the wavemeter switch
                    unit: 'm'    # wavelength (m) or frequency (Hz)
                    #exposure: 10  # exposure time in ms
        allow_remote: True

    wavemeter_proxy:
        module.Class: 'wavemeter.high_finesse_proxy.HighFinesseProxy'
        options:
            watchdog_interval: 1.0  # how often the watchdog checks for errors/changes in s

    wavemeter_dummy:
        module.Class: 'dummy.wavemeter_dummy.WavemeterDummy'
        options:
            channel_names:
                - 'Wavelength'
            channel_units:
                - 'm'
            channel_signals:
                - 'sine'
            data_type: 'float64'
            sample_timing: 'CONSTANT'  # Can be 'CONSTANT', 'TIMESTAMP' or 'RANDOM'