#  Example Qudi configuration file.

global:
    # list of modules to load when starting
    startup: []

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

gui:

    laser_gui:
        module.Class: 'laser.laser_gui.LaserGui'
        connect:
            laser_logic: laser_logic

    odmr_gui:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'

    switch_gui:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switch_logic'

    pulsed_gui:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsed_master_logic'

    qdplot_gui:
        module.Class: 'qdplot.qdplot_gui.QDPlotterGui'
        connect:
            qdplot_logic: 'qdplot_logic'

logic:

    laser_logic:
        module.Class: 'laser_logic.LaserLogic'
        options:
            query_interval: 0.1
        connect:
            laser: 'laserquantum_laser'
    #            laser: 'laser_dummy'

    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            microwave: 'mw_source_smiq'
            data_scanner: 'ni_finite_sampling_input'

    switch_logic:
        module.Class: 'switch_logic.SwitchLogic'
        options:
            watchdog_interval: 1
            autostart_watchdog: True
        connect:
            switch: 'switch_interfuse'

    switch_interfuse:
        module.Class: 'interfuse.switch_combiner_interfuse.SwitchCombinerInterfuse'
        connect:
            switch1: 'switch1_dummy'
            switch2: 'switch2_dummy'
        options:
            extend_hardware_name: True

    pulsed_master_logic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsed_measurement_logic'
            sequencegeneratorlogic: 'sequence_generator_logic'

    sequence_generator_logic:
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        options:
            assets_storage_path: 'D:/Qudi_data/saved_pulsed_assets'
        #overhead_bytes: 0
        #additional_predefined_methods_path: null
        #additional_sampling_functions_path: null
        #info_on_estimated_upliad_time:
        #disable_benchmark_prompt:
        connect:
            pulsegenerator: 'awg'

    pulsed_measurement_logic:
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        #additional_extraction_path:
        #additional_analysis_path:
        options:
            default_data_storage_type: 'text'
        connect:
            fastcounter: 'si'
#             microwave: 'mw_source_smiq'
            pulsegenerator: 'awg'

    odmr_scanner_interfuse:
        module.Class: 'interfuse.odmr_scanner_finite_sampling_interfuse.OdmrScannerFiniteSamplingInterfuse'
        options:
            power_channel: 'Power'
            frequency_channel: 'Frequency'
        connect:
            odmr_sampler: 'odmr_scanner_dummy'
            power_setter: 'cw_microwave_dummy'

    qdplot_logic:
        module.Class: 'qdplot_logic.QDPlotLogic'

hardware:
    si:
        module.Class: 'fast_adc.spectrum_instrumentation.SpectrumInstrumentation'
        options:
            ai_range_mV: 2000
            ai_offset_mV: 0
            ai_termination: '50Ohm'
            ai_coupling: 'DC'
            acq_mode: 'STD_MULTI'
            acq_HW_avg_num: 1
            acq_pre_trigger_samples: 64
            acq_post_trigger_samples: 64
            buf_notify_size_B: 4096
            clk_reference_Hz: 10e6
            trig_mode: 'EXT'
            trig_level_mV: 1000
            gated: True
            initial_buffer_size_S: 850000000
            repetitions: 0
            row_data_save: False


    awg:
        module.Class: 'awg.keysight_m819x.AWGM8195A'
        options:
            awg_visa_address: 'TCPIP0::localhost::hislip0::INSTR'
            awg_timeout: 30
            pulsed_file_dir: 'D:/Qudi_data/pulsed_files'
            assets_storage_path: 'D:/Qudi_data/saved_pulsed_assets'
            sample_rate_div: 4
            awg_mode: 'MARK'
            default_data_dir: 'D:Data'
    #        waveform_memory_mode: 'awg_segments_ivi'

    laserquantum_laser:
        module.Class: 'laser.laserquantum_laser.LaserQuantumLaser'
#        module.Class: 'laser.laserquantum_laser_ver2.SMD'
        options:
            interface: 'ASRL5::INSTR'
            maxpower: 0.250 # in Watt
            psu: 'SMD6000'

    odmr_scanner_dummy:
        module.Class: 'dummy.microwave_dummy.OdmrScannerDummy'

#     mw_source_smiq:
#         module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
#         visa_address: 'GPIB0::28::INSTR'
#         comm_timeout: 10000  # in milliseconds
#         visa_baud_rate: null  # optional
#         rising_edge_trigger: True  # optional
#         frequency_min: 300e3  # optional, in Hz
#         frequency_max: 6.4e9  # optional, in Hz
#         power_min: null  # optional, in dBm
#         power_max: null  # optional, in dBm

    mw_source_smiq:
        module.Class: 'microwave.mw_source_smiq.MicrowaveSmiq'
        options:
            visa_address: 'ASRL4::INSTR'
            comm_timeout: 10000  # in milliseconds
            visa_baud_rate: null  # optional
            rising_edge_trigger: True  # optional
            frequency_min: null  # optional, in Hz
            frequency_max: null  # optional, in Hz
            power_min: null  # optional, in dBm
            power_max: null  # optional, in dBm

#    microwave_dummy:
#        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'

    instream_dummy:
        module.Class: 'dummy.data_instream_dummy.InStreamDummy'
        options:
            digital_channels:  # optional, must provide at least one digital or analog channel
                - 'digital 1'
                - 'digital 2'
                - 'digital 3'
            analog_channels:  # optional, must provide at least one digital or analog channel
                - 'analog 1'
                - 'analog 2'
            digital_event_rates:  # optional, must have as many entries as digital_channels or just one
                - 1000
                - 10000
                - 100000
            # digital_event_rates: 100000
            analog_amplitudes:  # optional, must have as many entries as analog_channels or just one
                - 5
                - 10
            # analog_amplitudes: 10  # optional (10V by default)

    scanner_dummy:
        module.Class: 'dummy.scanning_probe_dummy.ScanningProbeDummy'
        options:
            position_ranges:
                'x': [0, 200e-6]
                'y': [0, 200e-6]
                'z': [-100e-6, 100e-6]
            frequency_ranges:
                'x': [0, 10000]
                'y': [0, 10000]
                'z': [0, 5000]
            resolution_ranges:
                'x': [2, 2147483647]
                'y': [2, 2147483647]
                'z': [2, 2147483647]
            position_accuracy:
                'x': 10e-9
                'y': 10e-9
                'z': 50e-9
            spot_density: 1e11

    camera_dummy:
        module.Class: 'dummy.camera_dummy.CameraDummy'

    laser_dummy:
        module.Class: 'dummy.simple_laser_dummy.SimpleLaserDummy'

#     finite_sampling_input_dummy:
#         module.Class: 'dummy.finite_sampling_input_dummy.FiniteSamplingInputDummy'
#         simulation_mode: 'ODMR'
#         sample_rate_limits: [1, 1e6]
#         frame_size_limits: [1, 1e9]
#         channel_units:
#             'APD counts': 'c/s'
#             'Photodiode': 'V'

    ni_finite_sampling_input:
        module.Class: 'ni_x_series.ni_x_series_finite_sampling_input.NIXSeriesFiniteSamplingInput'
        options:
            device_name: 'Dev2'
    #         digital_channel_units:  # optional
    #             'PFI8': 'c/s'
            analog_channel_units:  # optional
                'ai0': 'V'
                'ai1': 'V'
            # external_sample_clock_source: 'PFI10'  # optional
            # external_sample_clock_frequency: 1000  # optional
            adc_voltage_range: [-10, 10]  # optional
            max_channel_samples_buffer: 10000000  # optional
            read_write_timeout: 10  # optional
            sample_clock_output: '/Dev2/PFI8'  # optional
    ni_finite_sampling_io:
        module.Class: 'ni_x_series.ni_x_series_finite_sampling_io.NIXSeriesFiniteSamplingIO'
        options:
            device_name: 'Dev2'
            input_channel_units:  # optional
                'PFI8': 'c/s'
                'ai0': 'V'
                'ai1': 'V'
            output_channel_units:
                'ao0': 'V'
                'ao1': 'V'
            adc_voltage_ranges:
                ai0: [-10, 10]  # optional
                ai1: [-10, 10]  # optional
            output_voltage_ranges:
                ao0: [-5, 5]
                ao1: [-10, 10]
            #TODO output range, also limits need to be included in constraints
            frame_size_limits: [1, 1e9]  # optional #TODO actual HW constraint?
            output_mode: 'JUMP_LIST' # optional, must be name of SamplingOutputMode
            read_write_timeout: 10  # optional
            sample_clock_output: '/Dev2/PFI15' # optional

    finite_sampling_output_dummy:
        module.Class: 'dummy.finite_sampling_output_dummy.FiniteSamplingOutputDummy'
        options:
            sample_rate_limits: [1, 1e6]
            frame_size_limits: [1, 1e9]
            output_mode: 'JUMP_LIST'
            channel_units:
                'Frequency': 'Hz'
                'Voltage': 'V'

    finite_sampling_io_dummy:
        module.Class: 'dummy.finite_sampling_io_dummy.FiniteSamplingIODummy'
        options:
            sample_rate_limits: [1, 1e6]
            frame_size_limits: [1, 1e9]
            default_output_mode: 'JUMP_LIST'
            output_channel_units:
                'Frequency': 'Hz'
                'Voltage': 'V'
            input_channel_units:
                'APD counts': 'c/s'
                'Photodiode': 'V'

    switch1_dummy:
        module.Class: 'dummy.switch_dummy.SwitchDummy'
        options:
            name: 'First'  # optional
            remember_states: True  # optional
            switches:
                one: ['down', 'up']
                two: ['down', 'up']
                three: ['low', 'middle', 'high']

    switch2_dummy:
        module.Class: 'dummy.switch_dummy.SwitchDummy'
        options:
            name: 'Second'  # optional
            remember_states: True  # optional
            switches:
                'An even longer name of the switch itself':
                    - 'Very long name of a random state'
                    - 'Another very long name of a random state'
    fast_counter_dummy:
        module.Class: 'dummy.fast_counter_dummy.FastCounterDummy'
        options:
            gated: False

#     pulser_dummy:
#         module.Class: 'dummy.pulser_dummy.PulserDummy'
#         force_sequence_option: False
#
